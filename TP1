class NoAmmunitionError(Exception):
    pass 
class OutOfRangeError(Exception):
    pass

class Weapon:
    def __init__(self, ammunition: int, range: int):
        self._ammunition=ammunition
        self._range=range
    def fire_at(self, x: int, y: int, z: int):
        if self._ammunition != 0 :
            self._ammunition = self._ammunition-1
        else :
            raise NoAmmunitionError

class Lance_missiles_antisurface(Weapon):
    def __init__(self, ammunition=40, range=30):
        super().__init__(ammunition, range)


    def fire_at(self, x: int, y: int,z : int):
        if z == 0:
            if self._ammunition != 0 :
                self._ammunition = self._ammunition-1
            else :
                raise NoAmmunitionError
        else : 
            raise OutOfRangeError


class Lance_missiles_antiair(Weapon):
    def __init__(self, ammunition=50, range=40):
        super().__init__(ammunition, range)


    def fire_at(self, x: int, y: int, z: int): 
        if z>0:
            if self._ammunition != 0 :
                self._ammunition = self._ammunition-1
            else :
                raise NoAmmunitionError
        else:
            raise OutOfRangeError


class Lance_Torpilles(Weapon):
    def __init__(self, ammunition=15, range=20):
        super().__init__(ammunition, range)


    def fire_at(self, x: int, y: int, z: int):
        if z<0:
            if self._ammunition != 0 :
                self._ammunition = self._ammunition-1
            else :
                raise NoAmmunitionError
        else : 
            raise OutOfRangeError

arme1=Lance_missiles_antisurface()
arme1.fire_at(1,4,0)

print(arme1._ammunition)

arme1.fire_at(1,4,5)
